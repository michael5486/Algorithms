private void makeFilterTree(IntRectangle rect, FilterTreeNode node) {

        //Check if current rectangle intersects nodes bisectors
        if (rectNodeIntersection(rect, node)) {
            //System.out.println("Intersection found: " + rect + " | " + node);
            //If so, add to node.linkedlist and return
            node.rectList.add(rect);
            return;
        }


        //determine quadrant q of rectSet[i]
        int quadrant = findQuadrant(rect, node);
        int realQuadrant = quadrant;

        if (quadrant == 3)
            realQuadrant = 1;
        else if (quadrant == 1)
            realQuadrant = 3;

        //If no node currently resides in node.quadrants[quadrant], make newNode
        if (node.quadrants[realQuadrant] == null) {

            //create newNode off of q from current 
            //Quadrant HAS to be 3 to create bisectors in quadrant 1
            //Quadrant HAS to be 1 to create bisectors in quadrant 3
            newNode = new FilterTreeNode(quadrant, node);

            node.quadrants[realQuadrant] = newNode;

            //System.out.println("Newnode created in level: " + newNode.level + " in quadrant: " + realQuadrant);
            
            //for (int i = 0; i <= 3; i++)
                //System.out.println("\t Quadrant: " + i + " | " + node.quadrants[i]);
            
            makeFilterTree(rect, newNode);
        } else {

        
        //for (int i = 0; i <= 3; i++)
            //System.out.println("\t Quadrant: " + i + " | " + node.quadrants[i]);
        

        //Recursively call itself until node is bisected
        makeFilterTree(rect, node.quadrants[realQuadrant]);

        }

    }