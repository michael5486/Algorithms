
            FilterTreeNode quad0 = new FilterTreeNode(node.midX, 100, node.midX, 100, node.level + 1);
            FilterTreeNode quad1 = new FilterTreeNode(0, node.midX, node.midY, 100, node.level + 1);
            FilterTreeNode quad2 = new FilterTreeNode(0, node.midX, 0, node.midY, node.level + 1);
            FilterTreeNode quad3 = new FilterTreeNode(node.midX, 100, 0, node.midY, node.level + 1);

            if (this.testRectBisectIntersection(quad0, rect)) { //
                node.quadrants[0] = quad0;
                recursiveInsertRect(quad0, rect);

            } 
            else if (this.testRectBisectIntersection(quad1, rect)) {
                node.quadrants[1] = quad1;
                recursiveInsertRect(quad1, rect);
            }
            else if (this.testRectBisectIntersection(quad2, rect)) {
                node.quadrants[2] = quad2;
                recursiveInsertRect(quad2, rect);

            }
            else if (this.testRectBisectIntersection(quad3, rect)) {
                node.quadrants[3] = quad3;
                recursiveInsertRect(quad3, rect);
            }
            else {
                System.out.println("Code is getting here");
                if (this.rectInQuadrant(quad0, rect)) { //go to quadrant0
                    System.out.println("to quad0");                   
                    recursiveInsertRect(quad0, rect);
                }
                else if (this.rectInQuadrant(quad1, rect)) { //go to quadrant1
                    System.out.println("to quad1");                    
                    recursiveInsertRect(quad1, rect);
                }
                else if (this.rectInQuadrant(quad2, rect)) { //go to quadrant2
                    System.out.println("to quad2");                    
                    recursiveInsertRect(quad2, rect);
                }
                else { //go to quadrant 3
                    System.out.println("to quad3");                    
                    recursiveInsertRect(quad3, rect);
                }
            }   
        }





            /*public boolean rectInQuadrant(FilterTreeNode node, IntRectangle rect1) {
        int x1, x2, x3, x4, y1, y2, y3, y4;
        x1 = rect1.topLeft.x;
        y1 = rect1.topLeft.y;
        x2 = rect1.bottomRight.x;
        y2 = rect1.bottomRight.y;
       /* System.out.println("node.leftX " + node.leftX+ "  > x1 " + x1);
        System.out.println("node.topY " + node.topY+ "  > y1 " + y1);
        System.out.println("x2 " + x2+ "  < node.rightX " + node.rightX);
        System.out.println("node.botY " + node.botY+ "  < y2 " + y2);
        System.out.println((node.leftX < x1)+" "+(node.topY > y1)+" "+(x2 < node.rightX)+" "+(node.botY < y2));

        if (node.leftX < x1 && node.topY > y1 && x2 < node.rightX && node.botY < y2) {
            return true;
        }
        else {
            return false;
        }

    }*/

        /*public boolean testRectBisectIntersection(FilterTreeNode node, IntRectangle rect1) {
        int x1, x2, y1, y2, midX, midY;
        midX = node.midX;
        midY = node.midY;
        x1 = rect1.topLeft.x;
        y1 = rect1.topLeft.y;
        x2 = rect1.bottomRight.x;
        y2 = rect1.bottomRight.y; 
       // System.out.println(x1+ " " + x2 + " " + y1 + " " + y2);
        if ((x1 <= midX && x2 >= midX) || (y2 <= midY && y1 >= midY)) { //Rect intersects bisection of node
            return true;
        }
        else { //Rect doesn't intersect node bisection
            return false;
        }

    }*/

                   // if (!tempRect.isEmpty()) {
                    System.out.println("tempRect: " + tempRect);
                    for (int j = 0; j < tempRect.size(); j++) {
                        IntPair tempPair = new IntPair(tempRect.get(j).ID, rectSet[i].ID);
                        tempIntersection.add(tempPair);
                    }
              //  }





        System.out.println("Quadrant: " + this.findQuadrant(node, rect));
        

        if (this.findQuadrant(node, rect) == -1) { //Checks if rect bisects node
            node.rectList.add(rect);
          //  System.out.println("Added " + rect.toString() + " to " + node.level);
        }
        else { //determines the quadrant of the newNode
            int quadrant = this.findQuadrant(node, rect);
            //int realQuadrant = 1;
            
            if (quadrant == 3) {
                quadrant = 1;
            }
            else if (quadrant == 1) {
             quadrant = 3;
            }

            if (node.quadrants[quadrant] == null) {
                FilterTreeNode newNode = new FilterTreeNode(quadrant, node);
                node.quadrants[quadrant] = newNode;
                recursiveInsertRect(newNode, rect);
            }
            else {
                recursiveInsertRect(node.quadrants[quadrant], rect);
            }
        }